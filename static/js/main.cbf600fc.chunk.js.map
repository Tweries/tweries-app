{"version":3,"sources":["augment.js","makeItem.js","initialState.js","Item.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["augment","reducer","state","action","makeItem","hashtags","id","length","position","source","Math","round","random","toString","tweet","initialState","items","COLS","ROWS","Item","onChange","cols","data-testid","rows","value","className","classnames","warning","disabled","type","map","item","copy","pop","App","useReducer","dispatch","onSubmit","e","preventDefault","target","key","onClick","console","log","Date","version","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbf600fc.chunk.js","sourcesContent":["function augment(reducer) {\n  function logAction(state, action) {\n    // console.log('action:', action);\n    return reducer(state, action);\n  }\n  return logAction;\n}\n\nexport default augment;\n","function getId() {\n  return Math.round(Math.random() * 36 ** 12).toString(36);\n}\n\nfunction makeItem(hashtags, id, length, position, source = '') {\n  return {\n    id: id || getId(),\n    position,\n    source,\n    tweet: source\n      ? `${position}/${length} ${source} ${hashtags}`\n      : `${position}/${length} ${hashtags}`\n  };\n}\n\nexport default makeItem;\n","import makeItem from './makeItem';\n\nconst HASHTAGS = '#prodmgmt';\n\nconst initialState = {\n  hashtags: HASHTAGS,\n  items: [\n    makeItem(HASHTAGS, null, 4, 1, 'Foo'),\n    makeItem(HASHTAGS, null, 4, 2, 'Bar'),\n    makeItem(HASHTAGS, null, 4, 3, 'Barfood'),\n    makeItem(HASHTAGS, null, 4, 4, 'Barfood at bar')\n  ]\n};\n\nexport default initialState;\n","import classnames from 'classnames';\nimport React from 'react';\nimport './Item.css';\n\nconst COLS = 40;\nconst ROWS = 10;\n\nfunction Item({ onChange, source, tweet }) {\n  return (\n    <li>\n      <textarea\n        cols={COLS}\n        data-testid=\"source\"\n        onChange={onChange}\n        rows={ROWS}\n        value={source}\n      />\n      <textarea\n        className={classnames({ warning: tweet.length > 280 })}\n        cols={COLS}\n        disabled=\"disabled\"\n        rows={ROWS}\n        value={tweet}\n      />\n    </li>\n  );\n}\n\nexport default Item;\n","import initialState from './initialState';\nimport makeItem from './makeItem';\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_ITEM': {\n      return {\n        ...state,\n        items: [\n          ...state.items.map(\n            item =>\n              (item = makeItem(\n                state.hashtags,\n                item.id,\n                state.items.length + 1,\n                item.position,\n                item.source\n              ))\n          ),\n          makeItem(\n            state.hashtags,\n            null,\n            state.items.length + 1,\n            state.items.length + 1\n          )\n        ]\n      };\n    }\n    case 'CHANGE_SOURCE': {\n      return {\n        ...state,\n        items: state.items.map(item => {\n          if (item.id === action.value.id) {\n            item = makeItem(\n              state.hashtags,\n              item.id,\n              state.items.length,\n              item.position,\n              action.value.source\n            );\n          }\n          return item;\n        })\n      };\n    }\n    case 'REMOVE_ITEM': {\n      const copy = [...state.items];\n      copy.pop();\n      return {\n        ...state,\n        items: copy.map(\n          item =>\n            (item = makeItem(\n              state.hashtags,\n              item.id,\n              copy.length,\n              item.position,\n              item.source\n            ))\n        )\n      };\n    }\n    case 'UPDATE_HASHTAGS': {\n      return {\n        ...state,\n        hashtags: action.value,\n        items: state.items.map(\n          item =>\n            (item = makeItem(\n              action.value,\n              item.id,\n              state.items.length,\n              item.position,\n              item.source\n            ))\n        )\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import React, { useReducer } from 'react';\nimport { version } from '../package.json';\nimport './App.css';\nimport augment from './augment';\nimport initialState from './initialState';\nimport Item from './Item';\nimport reducer from './reducer';\n\nfunction App() {\n  const [{ hashtags, items }, dispatch] = useReducer(\n    augment(reducer),\n    initialState\n  );\n\n  return (\n    <article>\n      <h1>Serial Twitter</h1>\n      <form onSubmit={e => e.preventDefault()}>\n        <input\n          data-testid=\"hashtags\"\n          onChange={e =>\n            dispatch({ type: 'UPDATE_HASHTAGS', value: e.target.value })\n          }\n          type=\"text\"\n          value={hashtags}\n        />\n        <ul>\n          {items.map(item => (\n            <Item\n              key={item.id}\n              onChange={e =>\n                dispatch({\n                  type: 'CHANGE_SOURCE',\n                  value: { id: item.id, source: e.target.value }\n                })\n              }\n              source={item.source}\n              tweet={item.tweet}\n            />\n          ))}\n        </ul>\n        <button\n          data-testid=\"add\"\n          onClick={() => dispatch({ type: 'ADD_ITEM' })}\n        >\n          +\n        </button>\n        <button\n          data-testid=\"remove\"\n          onClick={() => dispatch({ type: 'REMOVE_ITEM' })}\n        >\n          -\n        </button>\n        <button\n          data-testid=\"tweet\"\n          onClick={() => console.log('now:', new Date())}\n        >\n          Tweet\n        </button>\n      </form>\n      <footer>v{version}</footer>\n    </article>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}