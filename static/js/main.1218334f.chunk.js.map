{"version":3,"sources":["store/initialState.js","store/makeTweetstorm.js","store/reducer.js","containers/App/augment.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["initialState","hashtags","items","source","makePrefix","index","length","undefined","makeTweetstorm","suffix","copy","slice","parts","take","v","prune","push","substr","map","part","tweet","reducer","state","action","type","value","augment","App","useReducer","dispatch","onSubmit","e","preventDefault","data-testid","rows","onChange","target","onClick","item","key","readOnly","console","log","Date","version","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAUeA,EANM,CACnBC,SALe,kBAMfC,MAAO,GACPC,OALA,skB,uBCAF,SAASC,EAAWC,EAAOC,GACzB,YAAcC,IAAVF,QAAkCE,IAAXD,EAClB,MAEH,GAAN,OAAUD,EAAQ,EAAlB,YAAuBC,GA2BVE,MAxBf,SAAwBL,EAAQM,GAK9B,IAJA,IAAIC,EAAOP,EAAOQ,QAEZC,EAAQ,GAES,IAAhBF,EAAKJ,QAAc,CACxB,IAAMO,EAAOC,IAAEC,MACbL,EALe,IAMFN,IAAaE,OAASG,EAAOH,OAAS,EACnD,IAEFM,EAAMI,KAAKH,GACXH,EAAOI,IAAEG,OAAOP,EAAMG,EAAKP,OAAS,GAStC,OANmBM,EAAMM,KAAI,SAACC,EAAMd,GAElC,IAAMe,EAAK,UAAMhB,EAAWC,EAAOO,EAAMN,QAA9B,YAAyCa,EAAzC,YAAiDV,GAC5D,MAAO,CAAEH,OAAQc,EAAMd,OAAQc,a,yjBCCpBC,MAzBf,WAAgD,IAA/BC,EAA8B,uDAAtBtB,EAAcuB,EAAQ,uCAC7C,OAAQA,EAAOC,MACb,IAAK,kBACH,OAAO,EAAP,GACKF,EADL,CAEErB,SAAUsB,EAAOE,QAGrB,IAAK,gBACH,OAAO,EAAP,GACKH,EADL,CAEEnB,OAAQoB,EAAOE,QAGnB,IAAK,sBACH,OAAO,EAAP,GACKH,EADL,CAEEpB,MAAOM,EAAec,EAAMnB,OAAQmB,EAAMrB,YAG9C,QACE,OAAOqB,I,MChBEI,MARf,SAAiBL,GAKf,OAJA,SAAmBC,EAAOC,GAExB,OAAOF,EAAQC,EAAOC,KCuDXI,MAnDf,WAAgB,IAAD,EACmCC,qBAC9CF,EAAQL,GACRrB,GAHW,0BACJC,EADI,EACJA,SAAUC,EADN,EACMA,MAAOC,EADb,EACaA,OAAU0B,EADvB,KAMb,OACE,iCACE,8CACA,0BAAMC,SAAU,SAAAC,GAAC,OAAIA,EAAEC,mBACrB,8BACEC,cAAY,SACZC,KAAM,GACNT,MAAOtB,EACPgC,SAAU,SAAAJ,GAAC,OACTF,EAAS,CAAEL,KAAM,gBAAiBC,MAAOM,EAAEK,OAAOX,WAGtD,2BACEQ,cAAY,WACZE,SAAU,SAAAJ,GAAC,OACTF,EAAS,CAAEL,KAAM,kBAAmBC,MAAOM,EAAEK,OAAOX,SAEtDD,KAAK,OACLC,MAAOxB,IAET,4BACEgC,cAAY,WACZI,QAAS,kBAAMR,EAAS,CAAEL,KAAM,0BAFlC,uBAMA,4BACGtB,EAAMgB,KAAI,SAACoB,EAAMjC,GAAP,OACT,wBAAIkC,IAAKlC,GACP,8BAAUmC,UAAQ,EAACN,KAAM,EAAGT,MAAOa,EAAKlB,aAI9C,4BACEa,cAAY,QACZI,QAAS,kBAAMI,QAAQC,IAAI,OAAQ,IAAIC,QAFzC,UAOF,oCAAUC,O,MCzCIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1218334f.chunk.js","sourcesContent":["const HASHTAGS = '#howto #tieatie';\nconst SOURCE =\n  'Although the Duke of Windsor never specifically used the Windsor knot, he did favor a wide triangular knot. In actuality, the Duke achieved his trendsetting look by tying a Four-in-Hand with specially made wide and extra thick ties. The Windsor knot was invented by the public as a way to imitate the Duke\\'s knot style. There are several derivatives of the Windsor that are all referred to by the same name. The Windsor delivers a symmetrical and solid triangular knot that works best with a spread collar. This knot is also mistakenly referred to as the \"Double Windsor\" knot.';\n\nconst initialState = {\n  hashtags: HASHTAGS,\n  items: [],\n  source: SOURCE\n};\n\nexport default initialState;\n","import v from 'voca';\n\nfunction makePrefix(index, length) {\n  if (index === undefined && length === undefined) {\n    return '_/_'; // AKA: placeholder\n  }\n  return `${index + 1}/${length}`;\n}\n\nfunction makeTweetstorm(source, suffix) {\n  let copy = source.slice();\n  const MAX_LENGTH = 280;\n  const parts = [];\n\n  while (copy.length !== 0) {\n    const take = v.prune(\n      copy,\n      MAX_LENGTH - makePrefix().length - suffix.length - 2, // INFO: 1 space after the prefix and one space before the suffix\n      ''\n    );\n    parts.push(take);\n    copy = v.substr(copy, take.length + 1);\n  }\n\n  const tweetstorm = parts.map((part, index) => {\n    // expect(part).toEqual(v.trim(part)); // INFO: to make sure that part does not contain whitespace from both sides\n    const tweet = `${makePrefix(index, parts.length)} ${part} ${suffix}`;\n    return { length: tweet.length, tweet };\n  });\n\n  return tweetstorm;\n}\n\nexport default makeTweetstorm;\n","import initialState from './initialState';\nimport makeTweetstorm from './makeTweetstorm';\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'CHANGE_HASHTAGS': {\n      return {\n        ...state,\n        hashtags: action.value\n      };\n    }\n    case 'CHANGE_SOURCE': {\n      return {\n        ...state,\n        source: action.value\n      };\n    }\n    case 'GENERATE_TWEETSTORM': {\n      return {\n        ...state,\n        items: makeTweetstorm(state.source, state.hashtags)\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","function augment(reducer) {\n  function logAction(state, action) {\n    // console.log('action:', action);\n    return reducer(state, action);\n  }\n  return logAction;\n}\n\nexport default augment;\n","import React, { useReducer } from 'react';\nimport { version } from '../../../package.json';\nimport initialState from '../../store/initialState';\nimport reducer from '../../store/reducer';\nimport './App.css';\nimport augment from './augment';\n\nfunction App() {\n  const [{ hashtags, items, source }, dispatch] = useReducer(\n    augment(reducer),\n    initialState\n  );\n\n  return (\n    <article>\n      <h1>Serial Twitter</h1>\n      <form onSubmit={e => e.preventDefault()}>\n        <textarea\n          data-testid=\"source\"\n          rows={16}\n          value={source}\n          onChange={e =>\n            dispatch({ type: 'CHANGE_SOURCE', value: e.target.value })\n          }\n        />\n        <input\n          data-testid=\"hashtags\"\n          onChange={e =>\n            dispatch({ type: 'CHANGE_HASHTAGS', value: e.target.value })\n          }\n          type=\"text\"\n          value={hashtags}\n        />\n        <button\n          data-testid=\"generate\"\n          onClick={() => dispatch({ type: 'GENERATE_TWEETSTORM' })}\n        >\n          Generate Tweetstorm\n        </button>\n        <ul>\n          {items.map((item, index) => (\n            <li key={index}>\n              <textarea readOnly rows={8} value={item.tweet} />\n            </li>\n          ))}\n        </ul>\n        <button\n          data-testid=\"tweet\"\n          onClick={() => console.log('now:', new Date())}\n        >\n          Tweet\n        </button>\n      </form>\n      <footer>v{version}</footer>\n    </article>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}